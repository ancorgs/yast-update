/**
 * Module: 	inst_rpmupdate.ycp
 *
 * Authors:	Stefan Schubert (schubi@suse.de)
 *		Arvin Schnell <arvin@suse.de>
 *
 * Purpose:
 * Install, Update and remove all the RPM packages the user has selected.
 * Show installation dialogue. Show progress bars.
 * Request CD change from user.
 *
 * $Id$
 */

{
    textdomain "update";

    import "Arch";
    import "Report";
    import "Mode";
    import "Installation";
    import "Language";
    import "Popup";
    import "Directory";
    import "Update";
    import "PackageInstallation";
    import "SpaceCalculation";
    import "Packages";
    import "SlideShow";

    if (!Mode::Update)
	return `auto;

    string rebuild_message = _("Checking package database. This process can take some time.");
    // popup message, %1 will be replace with the name of the logfile
    string rebuild_message_error = sformat (_("Package database check has returned an error.
Check the log file %1.\n"), "/var/log/YaST2/y2log");


    /**
     *  Some misc preparations.
     */
    define void prepare_stuff () ``{

	// ensure log path exists and use it
	SCR::Execute (.target.mkdir, Installation::destdir + "/var/log/YaST2");
	Pkg::TargetLogfile (Installation::destdir + "/var/log/YaST2/y2logRPM");

	// remove old junk
	SCR::Execute (.target.bash, Directory::ybindir + "/remove_junk " +
		      Installation::destdir);

    }


    /**
     *  Handle the backup.
     */
    define void backup_stuff () ``{

	if (Update::backup_modified)
	{
	    Pkg::CreateBackups (true);
	    Pkg::SetBackupPath (Update::backup_path);
	    SCR::Write (.target.string, Installation::destdir + "/var/lib/YaST2/backup_path",
			Update::backup_path);
	}
	else
	{
	    Pkg::CreateBackups (false);
	    SCR::Write (.target.remove, Installation::destdir + "/var/lib/YaST2/backup_path");
	}

	if (Update::remove_old_backups)
	{
	    SCR::Execute (.target.bash, "/bin/rm -f " + Installation::destdir +
			  Update::backup_path + "/*-*-*.tar.{gz,bz2}");
	}

	if (Update::backup_sysconfig)
	{
	    string date = timestring ("%Y%m%d", time(), false);

	    string filename = "";
	    integer num = 0;

	    while (num < 10)
	    {
		filename = Update::backup_path + "/etc.sysconfig-" + date + "-" +
		    sformat ("%1", num) + ".tar.bz2";
		if (SCR::Read (.target.size, filename) == -1)
		    break;
		num = num + 1;
	    }

	    if (SCR::Execute (.target.bash, "/bin/tar cjf " + Installation::destdir + filename +
			      " " + Installation::destdir + "/etc/sysconfig") != 0)
	    {
		y2error ("backup of /etc/sysconfig to %1 failed", filename);
		// an error popup
		Popup::Error (sformat (_("Backup of /etc/sysconfig failed. See %1 for details."),
				       "/var/log/YaST2/y2log"));
	    }
	}
    }


    //
    // Popup to start rpm --rebuild
    //

    // progress callback
    define void setProgress (integer progress) ``{
	UI::ChangeWidget(`id(`progress), `Value, progress );
    }

    define void rpmrebuild () ``{
	UI::OpenDialog(`opt(`decorated),
		       `VBox( `Heading( _("RPM DB rebuild")) ,
			      `VBox( `Label(rebuild_message),
				     `HSpacing(60),
				     `HBox(
					   `HSpacing(2),
					   `ProgressBar(`id(`progress),
							_("Status"), 100),
					   `HSpacing(2)
					   ),
				     `VSpacing(1)
				     )
			      )
		       ); // UI::OpenDialog()

	setProgress (0);
	Pkg::CallbackProgressRebuildDB ("setProgress");

	Pkg::TargetRebuildDB();

	UI::CloseDialog();
    };



    ////////////////////////////////////////////////////////////////////////////
    //  MAIN
    ////////////////////////////////////////////////////////////////////////////

    list base_packages = [];

    string tmpdir	= SCR::Read(.target.tmpdir);
    string language	= Language::language;

    SlideShow::SetLanguage( language );
    SlideShow::OpenSlideShowDialog();

    if ( Mode::initial )
    {
	prepare_stuff ();
	backup_stuff ();

	// check passwd and group of target

	SCR::Execute (.target.bash, "/usr/lib/YaST2/bin/update_users_groups " + Installation::destdir);

	// /etc/inittab will be overridden by package aaa_base. So we will
	// have to save the run-level
	// The runlevel-values have been changed since version 7.0; So we
	// have to handle older version in a special case.

	string idfile = SCR::Read(.target.tmpdir) + "/idline";

	if ( SCR::Execute (.target.bash, "/bin/grep ^id: " + Installation::destdir + "/etc/inittab >" + idfile) == 0 )
	{
	    // idline = "id:X:initdefault:"

	    string idline = SCR::Read(.target.string, idfile);

	    // idsplit = "id", "X", "initdefault", ""
	    list idsplit = splitstring (idline, ":");

	    integer initdefault = -1;
	    if (size (idsplit) > 2)
	    {
		initdefault = tointeger (idsplit[1]:"3");
	    }

	    y2milestone("run-level %1 found", initdefault);

	    // versplit = "7", "0", "0"
	    list versplit = splitstring (Update::installedVersion, ".");
	    integer oldmajor = tointeger (versplit[0]:"0");
	    if ((oldmajor != 0)
		&& ((oldmajor < 7)
		    || ((oldmajor == 7 && (versplit[1]:"" == "0")))))
	    {
		// position == old, value == new
		list new_levels = [ 0, 0, 3, 5, 4, 4 ];	// 0->0, 1->0, 2->3, 3->5, 4->4, 5->4
		initdefault = new_levels[initdefault]:5;
	    }

	    Update::last_runlevel = initdefault;		// evaluated in inst_finish
	}
    }

    y2milestone ("rpmrebuild");
    // rebuilding RPM-Database only while first run of installation
    rpmrebuild();

    any ret = `ok;

    if (Mode::normal)
    {
	// check if kernel is affected by this update

	list filterKernel = filter (string k, Pkg::GetPackages(`selected, true), ``(Pkg::PkgGroup(k) == "System/Kernel"));
	Update::kernel_affected = (size (filterKernel) > 0);
    }

    integer media_number = 0;

    if ( Mode::initial )
    {
	media_number = 1;
    }

    if (!Pkg::TargetFileHasOwner ("/usr/share/info/dir"))
    {
	y2milestone ("/usr/share/info/dir not owned by any package, removing");
	SCR::Execute (.target.remove, Installation::destdir + "/usr/share/info/dir");
    }

    // remove old (defective) list of still-to-be-installed source-rpms
    SCR::Execute (.target.remove, Installation::destdir + "/var/lib/YaST2/srcremaining");

    // returns [ int successful, list failed, list remaining, list srcremaining ]
    list commit_result = PackageInstallation::CommitPackages( media_number, 0 );

    //*********************************************************

    integer count = commit_result[0]:0;
    y2milestone ("%1 packages installed", count);

    if (count < 0)
    {
	UI::CloseDialog();
	return `abort;
    }

    list failed = commit_result[1]:[];
    if (size (failed) > 0)
    {
	y2milestone ("failed: %1", failed);
	list previous_failed = SCR::Read (.target.ycp, [Installation::destdir + "/var/lib/YaST2/failed_packages", []]);
	if (size (previous_failed) > 0)
	    failed = union (previous_failed, failed);
	SCR::Write (.target.ycp, Installation::destdir + "/var/lib/YaST2/failed_packages", failed);
    }
    list remaining = commit_result[2]:[];
    if (size (remaining) > 0)
    {
	y2milestone ("remaining: %1", remaining);
	SCR::Write (.target.ycp, Installation::destdir + "/var/lib/YaST2/remaining", remaining);
    }
    list srcremaining = commit_result[3]:[];
    if (size (srcremaining) > 0)
    {
	y2milestone ("source remaining: %1", srcremaining);
	SCR::Write (.target.ycp, Installation::destdir + "/var/lib/YaST2/srcremaining", srcremaining);
    }


    //*********************************************************
    // kernel_affected only triggers in 'normal' mode not
    // when running from inst-sys. The latter case is handled
    // by inst-finish

    if (Mode::normal)
    {
	if (Update::kernel_affected)		// kernel affected
	{
	    y2milestone ("Bootloader::Write()");
	    Kernel::switched = true;
	    Mode::update = true;		// flag for inst_suseconfig to warn about reboot
	    import "Bootloader";
	    Bootloader::Write();		// re-write initrd and bootloader
	}
	else
	{
	    Kernel::switched = false;		// so inst_finish doesnt ask for a reboot
	}
    }

    // Now that we know how many packages to install, we can show the dialog

    y2milestone("%1 packages have been installed", Update::packagesInstalled);

    if (Mode::initial)
    {
	SCR::Write(.target.string, Installation::destdir + "/var/lib/YaST2/update_mode", "YES");
	SCR::Execute (.target.remove, Installation::destdir + "/var/lib/YaST/update.inf");
    }

    // close "Slide" dialog (inst_rpmupdate doesn't use the "Wizard" dialog)
    UI::CloseDialog();

    return `next;
}
