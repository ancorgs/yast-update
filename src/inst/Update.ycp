/**
 * Module:		Update.ycp
 *
 * Authors:		Anas Nashif (nashif@suse.de)
 *			Arvin Schnell <arvin@suse.de>
 *
 * Purpose:		Update module
 *
 * $Id$
 */
{
    module "Update";


    // number of packages affected by update
    global integer affected_count = 0;

    // number of packages unknown by update (e.g. non-suse, dropped etc.)
    global integer unknown_count = 0;

    // if the kernel was affected in _normal_ update mode
    global boolean kernel_affected = false;


    // Flag is set true if the user decides to delete unmaintained packages
    global boolean deleteOldPackages = true;


    global integer last_runlevel = -1;


    global boolean backup_configs = true;
    global boolean backup_sysconfig = true;
    global boolean remove_old_backups = false;
    global string backup_path = "/var/adm/backup";


    // Only an update, NOT an upgrade
    global boolean onlyUpdateSelected = false;

    global string selected_selection = "";



    // Flag if the updatelist has already evaluated
    global boolean updateEvaluated = false;

    // Name of the targetsystem
    global string installedName = "";

    // Version of the targetsystem
    global string installedVersion = "";

    // Version of the source medium
    global string updateVersion = "";

    // Flag, if the basesystem have to be installed
    global boolean updateBasePackages = false;

    // counter for installed packages
    global integer packagesInstalled = 0;

    // Flag, if user changed the packager state
    global boolean userChangedState = false;

    // Flag, if user has seen all the glory update details
    global boolean seen_details = false;


    /*-----------------------------------------------------------------------
     * GLOBAL FUNCTIONS
     *-----------------------------------------------------------------------*/

    /**
     *
     */
    global define boolean GetProductName () ``{

	integer num = size (Packages::theSources);
	if (num <= 0)
	{
	    y2error ("No source");
	    Update::updateVersion = "?";
	    return false;
	}

	map product = Pkg::SourceProductData (Packages::theSources[num-1]:0);
	y2milestone ("First source product %1", product);
	if (product == nil)
	{
	    y2error ("Screwed source");
	    Update::updateVersion = "?";
	    return false;
	}

	Update::updateVersion = product["productname"]:"?" + " " +
	    product["productversion"]:"";
	return true;
    }


    /**
     * Find out which base selection is selected or as fallback installed on
     * the target system. Returns "default" if selection can't be determined.
     */
    global define string GetSelection () ``{

	list selections = Pkg::GetSelections (`selected, "base");

	if (selections == nil || selections == [])
	    selections = Pkg::GetSelections (`installed, "base");

	if (selections == nil || selections == [])
	    selections = ["default"];

	return selections[0]:"";
    }


    /**
     *
     */
    global define void Detach () ``{

	Pkg::TargetFinish ();

    }

}
