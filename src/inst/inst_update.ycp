/**
 * Module: 		inst_update.ycp
 *
 * Authors:		Stefan Schubert <schubi@suse.de>
 *			Arvin Schnell <arvin@suse.de>
 *
 * Purpose:
 * Displays software selection screen of previous installed software-groups.
 * Show checkboxes for software categories. Let the user select his software.
 * if he want to UPGRADE his system.
 */

{
    textdomain "update";

    import "Mode";
    import "Installation";
    import "Language";
    import "Wizard";
    import "Popup";
    import "RootPart";
    import "Update";
    import "Packages";


    // screen title for update options
    string title = _("Update Options");


    // current selection and list of base selections
    string current_selection = Update::GetSelection ();
    list available_base_selections = Pkg::GetSelections (`available, "base");


    // create box with base selections
    term baseconfsbox = `VBox ();
    foreach (`selection, available_base_selections, ``{
	map selection_data = Pkg::SelectionData (selection);
	string selection_summary = selection_data["summary"]:"";
	baseconfsbox = add (baseconfsbox, `Left(`RadioButton(`id(selection),
							     `opt(`notify, `autoShortcut),
							     selection_summary,
							     selection == current_selection)));
    });


    // Checking: already selected addons or single selection?

    string wrn_msg = "";

    if (Update::userChangedState)		// check if state changed
    {
	// Display warning message
	wrn_msg = _("\
You have already chosen software from \"Detailed selection\".\n\
You will lose that selection if you change the basic selection.");
    }

    // Build and show dialog

    string from_version = RootPart::GetInfoOfSelected (`shortname);
    string to_version = Update::updateVersion;

    term contents = `HVSquash(
	`VBox(
	      // label showing from what version to what version we are updating
	      `Label (sformat (_("Update from %1 to %2"), from_version, to_version)),
	      // frame title for update selection
	      `Frame( _("Update Mode"),
		      `VBox(
			    `VSpacing(0.8),
			    `RadioButtonGroup( `id(`bgoup), `opt(`notify),
					       `VBox(
						     `Left(`RadioButton(`id(`upgrade),`opt(`notify),
									// radio button label for update including new packages
									// translator: add a & shortcut
									_("&Update and install new stuff:"), false) ),
						     `VSpacing(0.5),
						     `HBox(
							   `HSpacing(4),
							   `RadioButtonGroup(`id(`baseconf), baseconfsbox)
							   ),
						     `VSpacing(1.5),
						     `Left(`RadioButton(`id(`notupgrade),`opt(`notify),
									// radio button label for update of already installed packages only
									// translator: add a & shortcut
									_("U&pdate installed packages only."), true) ),
						     `VSpacing(1.5)
						     )
					       )
			    )
		      ),

	      `Left(`CheckBox(`id(`delete),
			      // check box label
			      // translator: add a & shortcut
			      _("&Clean up the system - delete unmaintained packages."), true)),
	      `VSpacing(1.5),
	      `Label( `id(`wrn_label), wrn_msg )
	      )
	);


    // explain chooseable system configurations
    // but beware: some of the text in <b>'s, e.g. Default comes from the index file,
    // translations must be consistent with po/index/index.??.po
    // help part 1 of 3

    string helptext = _("<p>
It is recommended to update
your system to one of the
predefined software selections
to make use of the new
features and benefits of
the new <b>SuSE Linux</b> version.
</p>
");
    // help part 2 of 3
    helptext = helptext + _("<p>
You may, however, decide to update
only the packages already installed
on your system. In this case,
some important packages might
be missing, such as new YaST2 modules.
</p>\n");

    Wizard::OpenAcceptDialog ();

    Wizard::SetContents (title, contents, helptext, Args(0), Args(1));

    UI::ChangeWidget(`id(`upgrade), `Value, !Update::onlyUpdateSelected);
    UI::ChangeWidget(`id(`notupgrade), `Value, Update::onlyUpdateSelected);

    foreach (`sel, available_base_selections, ``{
	UI::ChangeWidget(`id(sel), `Enabled, !Update::onlyUpdateSelected);
    });

    UI::ChangeWidget(`id(`delete), `Value, Update::deleteOldPackages);

    any ret = nil;

    Update::userChangedState = true;

    while (true)
    {
	ret = Wizard::UserInput ();

	if (ret == `abort && CallFunction (`inst_confirm_abort (`painless)))
	    break;

	if (ret == `upgrade || ret == `notupgrade)
	{
	    boolean tmp = UI::QueryWidget (`id(`upgrade), `Value);
	    foreach (`sel, available_base_selections, ``{
		UI::ChangeWidget(`id(sel), `Enabled, tmp);
	    });

	    continue;
	}

	if (ret == `next && Update::userChangedState)
	{
	    boolean something_changed = false;

	    if (UI::QueryWidget (`id(`notupgrade), `Value) != Update::onlyUpdateSelected)
		something_changed = true;

	    if (UI::QueryWidget (`id(`upgrade), `Value) &&
		current_selection != UI::QueryWidget(`id(`baseconf), `CurrentButton))
		something_changed = true;

	    if (UI::QueryWidget (`id(`delete), `Value ) != Update::deleteOldPackages)
		something_changed = true;

	    if (something_changed)
	    {
		// yes/no question
		if (!Popup::YesNo (_("Do you really want\nto reset your detailed selection?")))
		    continue;
	    }
	}

	if (ret == `back || ret == `next)
	    break;
    }

    if (ret == `next)
    {
	Update::onlyUpdateSelected = UI::QueryWidget (`id(`notupgrade), `Value);
	Update::deleteOldPackages = UI::QueryWidget (`id(`delete), `Value);

	Update::updateEvaluated = false;
	Update::userChangedState = false;

	if (Update::onlyUpdateSelected)
	    Pkg::SetSelection ("default");
	else
	    Pkg::SetSelection (UI::QueryWidget(`id(`baseconf), `CurrentButton));

	Pkg::ActivateSelections ();
    }

    Wizard::CloseDialog ();

    return ret;
}
