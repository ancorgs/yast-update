/**
 * Module: 		inst_update.ycp
 *
 * Authors:		Stefan Schubert <schubi@suse.de>
 *			Arvin Schnell <arvin@suse.de>
 *
 * Purpose:
 * Displays software selection screen of previous installed software-groups.
 * Show checkboxes for software categories. Let the user select his software.
 * if he want to UPGRADE his system.
 */

{
    textdomain "update";

    import "Mode";
    import "Installation";
    import "Language";
    import "Wizard";
    import "Update";
    import "Packages";


    // screen title for update options
    string title = _("Update Options");


    // create box with base selections

    term baseconfsbox = `VBox ();
    list available_base_selections = Pkg::GetSelections (`available, "base");
    string current_selection = Update::GetSelection ();

    foreach (`selection, available_base_selections, ``{
	map selection_data = Pkg::SelectionData (selection);
	string selection_summary = selection_data["summary"]:"";
	baseconfsbox = add (baseconfsbox, `Left(`RadioButton(`id(selection),
							     `opt(`notify, `autoShortcut),
							     selection_summary,
							     selection == current_selection)));
    });


    // Checking: already selected addons or single selection?

    string wrn_msg = "";

    if (Update::userChangedState)		// check if state changed
    {
	// Display warning message
	wrn_msg = _("\
You have already chosen software from \"Detailed selection\".\n\
You will lose that selection if you change the basic selection.");
    }

    // Build and show dialog

    string from_version = Update::validRootPartitions[Update::selectedRootPartition]:"error";
    string to_version = "FIXME";

    term contents = `HVSquash(
	`VBox(
	      // label showing from what version to what version we are updating
	      `Label (sformat (_("Update from %1 to %2"), from_version, to_version)),
	      // frame title for update selection
	      `Frame( _("Update Mode"),
		      `VBox(
			    `VSpacing(0.8),
			    `RadioButtonGroup( `id(`bgoup), `opt(`notify),
					       `VBox(
						     `Left(`RadioButton(`id(`upgrade),`opt(`notify),
									// radio button label for update including new packages
									// translator: add a & shortcut
									_("&Update and install new stuff:"), false) ),
						     `VSpacing(0.5),
						     `HBox(
							   `HSpacing(4),
							   `RadioButtonGroup(`id(`baseconf),`opt(`notify), baseconfsbox)
							   ),
						     `VSpacing(1.5),
						     `Left(`RadioButton(`id(`notupgrade),`opt(`notify),
									// radio button label for update of already installed packages only
									// translator: add a & shortcut
									_("U&pdate installed packages only."), true) ),
						     `VSpacing(1.5)
						     )
					       )
			    )
		      ),

	      `Left(`CheckBox(`id(`delete),`opt(`notify),
			      // check box label
			      // translator: add a & shortcut
			      _("&Clean up the system - delete unmaintained packages."), Update::deleteOldPackages) ),
	      `VSpacing(1.5),
	      `Label( `id(`wrn_label), wrn_msg )
	      )
	);


    // explain chooseable system configurations
    // but beware: some of the text in <b>'s, e.g. Default comes from the index file,
    // translations must be consistent with po/index/index.??.po
    // help part 1 of 3

    string helptext = _("<p>
It is recommended to update
your system to one of the
predefined software selections
to make use of the new
features and benefits of
the new <b>SuSE Linux</b> version.
</p>
");
    // help part 2 of 3
    helptext = helptext + _("<p>
You may, however, decide to update
only the packages already installed
on your system. In this case,
some important packages might
be missing, such as new YaST2 modules.
</p>\n");

    Wizard::OpenAcceptDialog ();

    Wizard::SetContents(title, contents, helptext, Args(0),Args(1));

    if ( Update::onlyUpdateSelected )
    {
	foreach (`sel, available_base_selections, ``{
	    UI::ChangeWidget(`id(sel), `Enabled, false);
	});

	UI::ChangeWidget(`id(`notupgrade), `Value, true);
    }
    else
    {
	foreach (`sel, available_base_selections, ``{
	    UI::ChangeWidget(`id(sel), `Enabled, true);
	});

	UI::ChangeWidget(`id(`upgrade), `Value, true);
    }

    any ret = nil;

    list current_sel = [];

    while (true)
    {
	list save_sel = [];
	boolean save_notupgrade = UI::QueryWidget(`id(`notupgrade), `Value);

	if ( !Update::onlyUpdateSelected )
	{
	    save_sel = add( save_sel, UI::QueryWidget(`id(`baseconf), `CurrentButton));
	}

	ret = Wizard::UserInput ();

	if (ret == `abort && CallFunction (`inst_confirm_abort (`painless)))
	    break;

	// Add the selection of the basic group

	current_sel = [];
	if (  !UI::QueryWidget(`id(`notupgrade), `Value) )
	{
	    current_sel = add(current_sel, UI::QueryWidget(`id(`baseconf),`CurrentButton));
	}

	if (save_sel != current_sel
	    || save_notupgrade != UI::QueryWidget(`id(`notupgrade), `Value)
	    || Update::deleteOldPackages !=  UI::QueryWidget( `id(`delete), `Value ))
	{
	    Update::deleteOldPackages = UI::QueryWidget( `id(`delete), `Value );
	    if (!Update::userChangedState
		// yes/no question
		|| UI::YesNoPopup(_("Do you really want\nto reset your detailed selection?") ) )
	    {
		if ( save_sel != current_sel
		     && !UI::QueryWidget(`id(`notupgrade), `Value))
		{
		    // software-group-selection has been changed
		    Pkg::SetSelection (current_sel[0]:"");
		    Update::onlyUpdateSelected = false;
 		}
		else
		{
		    if ( UI::QueryWidget(`id(`notupgrade), `Value) )
		    {
			Update::onlyUpdateSelected = true;

			foreach(`sel, available_base_selections, ``{
			    UI::ChangeWidget(`id(sel), `Enabled, false);
			});
		    }
		    else
		    {
			Update::onlyUpdateSelected = false;
			Pkg::SetSelection ("default");
		    }
		}

		// resetting package-selection
		Pkg::ActivateSelections ();

		// Evaluate update packages new
		Update::updateEvaluated = false;
		Update::userChangedState = false;
	    }

	    // rebuild
	    ret = `again;
	}

	if (ret == `back || ret == `next)
	    break;
    }

    // set the flag 'deleteOldPackages' to inform inst_sw_update.ycp
    if (ret == `next)
    {
	Update::onlyUpdateSelected = UI::QueryWidget (`id(`notupgrade), `Value);
	Update::deleteOldPackages = UI::QueryWidget (`id(`delete), `Value);

	if (!Update::onlyUpdateSelected)
	{
	    // software-group-selection must change
	    Pkg::SetSelection (current_sel[0]:"");
	    Pkg::ActivateSelections ();
	    Update::onlyUpdateSelected = false;
	}
    }

    Wizard::CloseDialog ();

    return ret;
}
