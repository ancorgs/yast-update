/**
 * Module: 	inst_backup.ycp
 *
 * Authors:	Stefan Schubert <schubi@suse.de>
 *		Arvin Schnell <arvin@suse.de>
 *
 * Purpose:	Ask the user for backups during the update.
 */

{
    textdomain "update";

    import "Arch";
    import "Mode";
    import "Installation";
    import "Update";
    import "SpaceCalculation";
    import "Wizard";
    import "Popup";


    string backup_path = Update::backup_path;

    integer min_space = 50;

    //
    // Check, if the backup fits to disk
    //

    define boolean check_backup_path (list part_info) ``{

	boolean found = false;
	integer free_space = 0;

	if ( size ( backup_path ) <= 1 ||
	     substring(backup_path,0,1) != "/" )
	{
	    // error popup, user did not enter a valid directory specification
	    Popup::Message( _("Invalid backup path.") );
	    return false;
	}

	foreach( `part, part_info, ``{

	    string part_name = part["name"]:"";

	    if ( part_name == "/" && !found )
	    {
		free_space = part["free"]:0;
		y2milestone("Partition :%1", part_name);
		y2milestone("free:%1", free_space );
	    }

	    if ( size ( backup_path ) >= 2 && part_name != "/")
	    {
		string compare_string = substring ( backup_path, 0 , size ( part_name ) );
		if (compare_string == part_name && !found)
		{
		    free_space   = part["free"]:0;
		    y2milestone("Partition :%1", part_name );
		    y2milestone("free:%1", free_space );
		    found = true;
		}
		else
		{
		    y2milestone("Partition :%1<->%2", part_name, compare_string);
		}
	    }
	} );

	if (free_space >= min_space || Mode::test)
	{
	    return true;
	}
	else
	{
	    // there is not enough space for the backup during update
	    // inform the user about this (MB==megabytes)
	    string message = sformat ( _("Minimum disk space of %1 MB required."), min_space);
	    Popup::Message (message);
	    return false;
	}
    };


    // Get information about available partitions
    list partition = SpaceCalculation::GetPartitionInfo();
    y2milestone("evaluate partitions: %1", partition);

    // screen title for software selection
    string title = _("Backup System Before Update");

    // Build and show dialog

    Wizard::OpenAcceptDialog();

    term contents = `HVSquash(
			      `VBox(
				    `Left(`CheckBox(`id(`configs),`opt(`notify),
						    // checkbox label if user wants to backup config files
						    _("Create backup of modified configuration files"))),
				    `Left(`CheckBox(`id(`sysconfig),`opt(`notify),
						    // checkbox label if user wants to backup /etc/sysconfig
						    _("Create a complete backup of /etc/sysconfig"))),
				    `VSpacing (1),
				    `Left(`CheckBox(`id(`remove),`opt(`notify),
						    // checkbox label if user wants remove old backup stuff
						    _("Remove old backups from the backup directory"))),
				    `VSpacing(),
				    // label for text entry or backup path
				    `TextEntry(`id(`path), _("Backup path:"))
				    )
			      );

    // help text for backup dialog during update 1/8
    string help_text = _("<p>During update some packages may install new
versions of dedicated configuration files. This could be necessary if the new
version of a package has configuration options different from those in the
previous version.</p>");

    // help text for backup dialog during update 2/8
    help_text = help_text + _("<p>To avoid any loss of information that is
stored in your current configuration files it is possible to create a
<b>backup</b> prior to updating.</p>");

    // help text for backup dialog during update 3/8
    help_text = help_text + _("<p><b>Warning:</b> Please be aware that this
will not be a complete backup. Only your configuration files will be
saved.</p>");

    // help text for backup dialog during update 4/8
    help_text = help_text + _("<p>Please select the options that you want to
be activated.</p>");

    // help text for backup dialog during update 5/8
    help_text = help_text + _("<p><b>Create a backup of modified configuration
files:</b> Stores only those configuration files that are replaced during
update.</p>");

    // help text for backup dialog during update 6/8
    help_text = help_text + _("<p><b>Create a complete backup of
/etc/sysconfig:</b> This covers all configuration files that are part of the
sysconfig mechanism, even those that are not replaced.</p>");

    // help text for backup dialog during update 7/8
    help_text = help_text + _("<p><b>Remove old backups from the backup
directory:</b> If your current system already is the result of an earlier
update, there may be old configuration file backups. Select this option to
remove them.</p>");

    // help text for backup dialog during update 8/8
    help_text = help_text + _("<p><b>Backup path:</b> is the location where
the backup is stored. Leave it as it is unless you have good reason to change
it.</p>");


    Wizard::SetContents (title, contents, help_text, Args(0), Args(1));

    UI::ChangeWidget (`id(`configs), `Value, Update::backup_configs);
    UI::ChangeWidget (`id(`sysconfig), `Value, Update::backup_sysconfig);
    UI::ChangeWidget (`id(`remove), `Value, Update::remove_old_backups);

    UI::ChangeWidget (`id(`path), `Value, backup_path);
    UI::ChangeWidget (`id(`path), `Enabled, Update::backup_configs ||
		      Update::backup_sysconfig || Update::remove_old_backups);

    any ret = nil;

    while (true)
    {
	ret = Wizard::UserInput();

	if (ret == `abort && CallFunction (`inst_confirm_abort (`painless)))
	    break;

	if (ret == `cancel || ret == `back)
	    break;

	// any backup wanted?
	boolean tmp1 = UI::QueryWidget (`id(`configs), `Value) ||
	    UI::QueryWidget (`id(`sysconfig), `Value);

	// any backup or remove of old stuff wanted?
	boolean tmp2 = UI::QueryWidget (`id(`configs), `Value) ||
	    UI::QueryWidget (`id(`sysconfig), `Value) ||
	    UI::QueryWidget (`id(`remove), `Value);

	// backup path
	backup_path = UI::QueryWidget (`id(`path), `Value);

	// enable or disable path widget
	UI::ChangeWidget(`id(`path), `Enabled, tmp2);

	if (ret == `next)
	{
	    if (tmp1 && !check_backup_path (partition))
	    {
		UI::SetFocus (`id(`path));
		continue;
	    }

	    Update::backup_configs = UI::QueryWidget (`id(`configs), `Value);
	    Update::backup_sysconfig = UI::QueryWidget (`id(`sysconfig), `Value);
	    Update::remove_old_backups = UI::QueryWidget (`id(`remove), `Value);
	    Update::backup_path = backup_path;

	    break;
	}
    }

    Wizard::CloseDialog ();

    return ret;
}
