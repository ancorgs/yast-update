/**
 * Module:	inst_rootpart.ycp
 *
 * Authors:	Stefan Schubert <schubi@suse.de>
 *		Arvin Schnell <arvin@suse.de>
 *
 * Purpose:	Select root partition for update or booting.
 *		RootPart::validRootPartitions must be filled before
 *		calling this module.
 */
{
    textdomain "update";

    import "Wizard";
    import "Label";
    import "RootPart";
    import "Storage";


    // This dialog comes in three different flavors: `update_dialog,
    // `update_popup and `boot_popup
    symbol flavor = WFM::Args (2);


    define void make_partition_list (boolean withall) ``{

	partition_list = [];

	if (withall)
	{
	    map target_map = Storage::GetTargetMap ();
	    foreach (`device, `description, target_map, ``{
		foreach (`partition, description["partitions"]:[], ``{
		    string r = partition["device"]:"error";
		    // Label for an "unknown system"
		    string s = RootPart::validRootPartitions[r]:_("Unknown");
		    partition_list = add (partition_list, `item (`id (r), s, r));
		});
	    });
	}
	else
	{
	    foreach (`p, `r, RootPart::validRootPartitions, ``{
		partition_list = add (partition_list, `item (`id (p), r, p));
	    });
	}
    }


    list partition_list = [];
    make_partition_list (RootPart::showAllPartitions);


    string heading = "";
    if (flavor == `boot_popup)
	heading = _("Select System to Boot");
    else
	heading = _("Select System to Update");


    term contents =
	`VBox (
	       // heading for 'select root partiton' dialogue
	       `Heading ( heading ),
	       `VSpacing (0.5),
	       `HCenter (
			 `HSquash (
				   `VBox (
					  `HSpacing( 40 ),	// force minimum width
					  // label for selection list of root partitions
					  `Left (`Label (_("Select System:"))),
					  `Table (`id (`partition),
						  `header (_("System"),
							   _("Root Partition")),
						  partition_list),
					  `Left(`CheckBox(`id(`showall), `opt(`notify),
							  _("Show all Partition"), false))
					  )
				   )
			 ),
	       `VSpacing (2)
	       );

    // helptext for root partition
    string help_text = _("<p>
Select the <b>root partition</b> to use.
</p>
");

    if (flavor == `update_dialog)
    {
	Wizard::OpenAcceptDialog ();
	Wizard::SetContents ("", contents, help_text, Args(0), Args(1));
    }
    else
    {
	term buttons = `PushButton (`id(`next), `opt(`default), Label::OKButton());

	if (flavor == `boot_popup)
	{
	    buttons = `HBox (
			     // pushbutton to (rightaway) boot the system selected above
			     `HWeight( 1, `PushButton(`id(`next), `opt(`default), _("Boot")) ),
			     `HSpacing( 1 ),
			     `HWeight( 1, `PushButton(`id(`cancel), Label::CancelButton() ) )
			     );
	}

	term full = `HBox (
			   `VSpacing( 16 ),		// force dialog height
			   `VBox(
				 `HSpacing( 30 ),	// force help text width
				 `RichText( help_text )
				 ),
			   `HSpacing( 3 ),
			   `VBox(
				 `VSpacing( 1 ),
				 contents,
				 buttons
				 ),
			   `HSpacing( 3 )
			   );

	UI::OpenDialog (full);
    }


    if (size (RootPart::selectedRootPartition) > 0)
	UI::ChangeWidget (`id(`partition), `CurrentItem, RootPart::selectedRootPartition);

    UI::ChangeWidget(`id(`showall), `Value, RootPart::showAllPartitions);


    any ret = nil;

    while (true)
    {
	if (flavor == `update_dialog)
	    ret = Wizard::UserInput ();
	else
	    ret = UI::UserInput ();

	if (ret == `abort && CallFunction (`inst_confirm_abort (`painless)))
	    break;

	if (ret == `showall)
	{
	    string tmp = UI::QueryWidget (`id(`partition), `CurrentItem);
	    make_partition_list (UI::QueryWidget (`id(`showall), `Value));
	    UI::ChangeWidget (`id(`partition), `Items, partition_list);
	    UI::ChangeWidget (`id(`partition), `CurrentItem, tmp);
	    continue;
	}

	if (ret == `cancel || ret == `back || ret == `next)
	    break;
    }

    if (ret == `next)
    {
	RootPart::selectedRootPartition = UI::QueryWidget (`id(`partition), `CurrentItem);
	RootPart::showAllPartitions = UI::QueryWidget (`id(`showall), `Value);
    }

    if (flavor == `update_dialog)
	Wizard::CloseDialog ();
    else
	UI::CloseDialog ();

    return ret;
}
