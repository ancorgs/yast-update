/**
 * Module:	inst_rootpart.ycp
 *
 * Authors:	Stefan Schubert <schubi@suse.de>
 *		Arvin Schnell <arvin@suse.de>
 *
 * Purpose:	Select root partition for update or booting.
 *		Update::validRootPartitions must be filled before
 *		calling this module.
 */
{
    textdomain "update";

    // import "Mode";
    // import "Installation";
    // import "Storage";
    // import "FileSystems";
    import "Wizard";
    import "Update";
    // import "Language";
    // import "Mouse";
    // import "Timezone";

    if ( !Mode::initial )
    {
	// Update has been started from installed system.
	return `auto;
    }


    boolean as_popup = false;
    if (size (WFM::Args ()) >= 3 && is (WFM::Args (0), boolean))
    {
	as_popup = WFM::Args (2);
    }

    // include "partitioning/partition_defines.ycp";
    // include "partitioning/custom_part_helptexts.ycp";
    // include "partitioning/custom_part_dialogs.ycp";

    list partition_list = [];
    foreach (`p, `r, Update::validRootPartitions, ``{
	partition_list = add (partition_list, `item (`id (p), r, p));
    });

    term contents = `VBox (
			   // heading for 'select root partiton' dialogue
			   `Heading ( _("Select System") ),
			   `VSpacing (0.5),
			   `HCenter (
				     `HSquash (
					       `VBox (
						      `HSpacing( 40 ),	// force minimum width
						      // label for selection list of root partitions
						      `Left (`Label (_("Select your root partition:"))),
						      `Table (
							      `id (`partition),
							      `header (_("System"), _("Partition")),
							      partition_list
							      )
						      )
					       )
				     ),
			   `VSpacing (2)
			   );

    // helptext for root-partition
    string help_text = _("<p>
Select the <b>root partition</b> to use.
</p>
");

    if (as_popup)
    {
	term full = `HBox (
			   `VSpacing( 16 ),		// force dialog height
			   `VBox(
				 `HSpacing( 30 ),	// force help text width
				 `RichText( help_text )
				 ),
			   `HSpacing( 3 ),
			   `VBox(
				 `VSpacing( 1 ),
				 contents,
				 `PushButton (`id(`next), `opt(`default), UI::OKButtonLabel())
				 ),
			   `HSpacing( 3 )
			   );

	UI::OpenDialog (full);
    }
    else
    {
	Wizard::OpenAcceptDialog ();
	Wizard::SetContents ("", contents, help_text, Args(0), Args(1));
    }

    if (size (Update::selectedRootPartition) > 0)
    {
	UI::ChangeWidget (`id(`partition), `CurrentItem, Update::selectedRootPartition);
    }

    any ret = nil;

    while (true)
    {
	if (as_popup)
	    ret = UI::UserInput ();
	else
	    ret = Wizard::UserInput ();

	if (ret == `abort && CallFunction (`inst_confirm_abort (`painless)))
	    break;

	if (ret == `back || ret == `next)
	    break;
    }

    if (ret == `next)
    {
	Update::selectedRootPartition = UI::QueryWidget (`id(`partition), `CurrentItem);
    }

    if (as_popup)
	UI::CloseDialog ();
    else
	Wizard::CloseDialog ();

    return ret;
}
