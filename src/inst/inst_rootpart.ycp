/**
 * Module:	inst_rootpart.ycp
 *
 * Authors:	Stefan Schubert <schubi@suse.de>
 *		Arvin Schnell <arvin@suse.de>
 *
 * Purpose:	Select root partition for update or booting.
 *		RootPart::validRootPartitions must be filled before
 *		calling this module.
 */
{
    textdomain "update";

    import "Wizard";
    import "Label";
    import "RootPart";


    // This dialog comes in three different flavors: `update_dialog,
    // `update_popup and `boot_popup
    symbol flavor = WFM::Args (2);


    list partition_list = [];
    foreach (`p, `r, RootPart::validRootPartitions, ``{
	partition_list = add (partition_list, `item (`id (p), r, p));
    });


    string heading = "";
    if (flavor == `boot_popup)
	heading = _("Select System to Boot");
    else
	heading = _("Select System to Update");


    term contents = `VBox (
			   // heading for 'select root partiton' dialogue
			   `Heading ( heading ),
			   `VSpacing (0.5),
			   `HCenter (
				     `HSquash (
					       `VBox (
						      `HSpacing( 40 ),	// force minimum width
						      // label for selection list of root partitions
						      `Left (`Label (_("Select System:"))),
						      `Table (
							      `id (`partition),
							      `header (_("System"),
								       _("Root Partition")),
							      partition_list
							      )
						      )
					       )
				     ),
			   `VSpacing (2)
			   );

    // helptext for root partition
    string help_text = _("<p>
Select the <b>root partition</b> to use.
</p>
");

    if (flavor == `update_dialog)
    {
	Wizard::OpenAcceptDialog ();
	Wizard::SetContents ("", contents, help_text, Args(0), Args(1));
    }
    else
    {
	term buttons = `PushButton (`id(`next), `opt(`default), Label::OKButton());

	if (flavor == `boot_popup)
	{
	    buttons = `HBox (
			     // pushbutton to (rightaway) boot the system selected above
			     `HWeight( 1, `PushButton(`id(`next), `opt(`default), _("Boot")) ),
			     `HSpacing( 1 ),
			     `HWeight( 1, `PushButton(`id(`cancel), Label::CancelButton() ) )
			     );
	}

	term full = `HBox (
			   `VSpacing( 16 ),		// force dialog height
			   `VBox(
				 `HSpacing( 30 ),	// force help text width
				 `RichText( help_text )
				 ),
			   `HSpacing( 3 ),
			   `VBox(
				 `VSpacing( 1 ),
				 contents,
				 buttons
				 ),
			   `HSpacing( 3 )
			   );

	UI::OpenDialog (full);
    }

    if (size (RootPart::selectedRootPartition) > 0)
	UI::ChangeWidget (`id(`partition), `CurrentItem, RootPart::selectedRootPartition);

    any ret = nil;

    while (true)
    {
	if (flavor == `update_dialog)
	    ret = Wizard::UserInput ();
	else
	    ret = UI::UserInput ();

	if (ret == `abort && CallFunction (`inst_confirm_abort (`painless)))
	    break;

	if (ret == `cancel || ret == `back || ret == `next)
	    break;
    }

    if (ret == `next)
    {
	RootPart::selectedRootPartition = UI::QueryWidget (`id(`partition), `CurrentItem);
    }

    if (flavor == `update_dialog)
	Wizard::CloseDialog ();
    else
	UI::CloseDialog ();

    return ret;
}
