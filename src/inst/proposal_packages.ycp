/**
 * Module:	proposal_packages.ycp
 *
 * Author:	Arvin Schnell <arvin@suse.de>
 *
 * Purpose:	Let user choose packages during update.
 */
{
    textdomain "update";

    import "HTML";

    string func  = WFM::Args(0);
    map    param = WFM::Args(1);
    map    ret   = $[];


    define symbol call_packageselector () ``{

	Update::seen_details = true;

	if (Update::unknown_count > 0)
	{
	    UI::OpenDialog (`opt(`defaultsize), `PackageSelector (`id(`selector),
								  `opt(`updateMode )));
	}
	else
	{
	    UI::OpenDialog (`opt(`defaultsize), `PackageSelector (`id(`selector)));
	}

	Pkg::SaveState();

	symbol ret = UI::RunPkgSelection (`id(`selector));
	if (ret == `accept)
	{
	    if (Pkg::RestoreState(true))
	    {
		Update::userChangedState = true;
	    }
	    Pkg::ClearSaveState();
	}
	else
	{
	    Pkg::RestoreState();
	}

	UI::CloseDialog();

	return ret;
    }


    if ( func == "MakeProposal" )
    {
	boolean force_reset      = param["force_reset"     ]:false;
	boolean language_changed = param["language_changed"]:false;

	// call some function that makes a proposal here:
	//
	// DummyMod::MakeProposal( force_reset );

	// Fill return map

	// FIXME: add space check

	list tmp = [];

	// proposal for packages during update
	tmp = add (tmp, sformat (_("Affected Packages: %1"),
				 Update::affected_count));

	if (Update::unknown_count > 0)
	{
	    // proposal for packages during update
	    tmp = add (tmp, sformat (_("Packages to Check Manually: %1"),
				     Update::unknown_count));

	    ret = $[ "preformatted_proposal" : HTML::List (tmp),
		     // the proposal for the packages requires manual intervention
		     "warning" : "Requires manual intervention",
		     "warning_level" : `blocker ];
	}
	else
	{
	    ret = $[ "preformatted_proposal" : HTML::List (tmp) ];
	}
    }
    else if ( func == "AskUser" )
    {
	boolean has_next = param["has_next"]:false;

	// call some function that displays a user dialog
	// or a sequence of dialogs here:
	//
	// sequence = DummyMod::AskUser( has_next );

	symbol result = call_packageselector ();
	Update::unknown_count = 0;

	// Fill return map

	ret = $[ "workflow_sequence" : result ];
    }
    else if ( func == "Description" )
    {
	// Fill return map.
	//
	// Static values do just nicely here, no need to call a function.

	ret =
	    $[
	      // this is a heading
	      "rich_text_title"	:	_("Packages"),
	      // this is a menu entry
	      "menu_title"	:	_("&Packages"),
	      "id"		:	"packages_stuff"
	    ];
    }

    return ret;
}
