/*
 *
 *
 * $Id$
 */

{
  textdomain "sw_update";

  include "package_utils.ycp";
  include "ui/common_popups.ycp";

  Include (`yast_version());
  string version = yast_version ();

  y2milestone ( "YaST2-version: %1", version );

  // Menuentry for the YaST2 menu

  integer current_stage = -1;

  include "installation_ui.ycp";


  // --------------------------------------------------------------

  // map user_settings contains:
  // - continue_mode -> module inst_rpmupdate
  // - language -> module inst_rpmupdate
  // - updateTarget -> module inst_rpmupdate
  // - architecture -> moduel inst_rpmupdate

  string default_language = "en";
  string default_architecture = "i386";
  string default_board	= "wintel";

  map user_settings = $[];
  
  string targetroot = SCR(`Read(.target.root));
  user_settings = add (user_settings, "targetroot",
		       targetroot );  // It is from an installed system


  string architecture = SCR(`Read(.probe.architecture));
  boolean arch_i386	= (architecture == "i386");
  boolean arch_sparc32= (architecture == "sparc");
  boolean arch_sparc64= (architecture == "sparc64");
  boolean arch_sparc	= (arch_sparc32 || arch_sparc64);
  boolean arch_ppc	= (architecture == "ppc");
  boolean arch_alpha	= (architecture == "axp");
  boolean arch_s390	= (architecture == "s390");
  boolean arch_ia64	= (architecture == "ia64");

  string board_type   = default_board;
  list systemProbe = SCR(`Read(.probe.system));
  foreach (`systemEntry, systemProbe, ``{
      string checksys = lookup (systemEntry, "system", "");
      if (checksys != "")
        board_type = checksys;
  });
  boolean board_wintel= (board_type == "");	// for now
  boolean board_mac	= (board_type == "MacRISC");
  boolean board_chrp	= (board_type == "CHRP");
  boolean board_chrp64= (board_type == "CHRP64");
  boolean board_prep	= (board_type == "PReP");

  map user_settings = $[];

  string language = UI( `GetLanguage() );
  string architecture = SCR(`Read(.probe.architecture));

  map lang2yast1 = ReadY2("lang2yast1.ycp");

  string  long_language 	= lookup(lang2yast1, language, "english");

  // setting targetroot
  string targetroot            = SCR(`Read(.target.root));
  user_settings = add( user_settings, "targetroot", targetroot );

  // informations needed in all following frames
  user_settings = add(user_settings, "updateTarget", targetroot);
  user_settings = add( user_settings, "language", language);
  user_settings = add( user_settings, "continue_mode", false);
  user_settings = add( user_settings, "architecture" , architecture);
  user_settings = add( user_settings, "post_install", true );
  // !!!!!!!!!!!!!!! ONLY FOR TESTING !!!!!!!!!!!!!!!!!!!!
  // user_settings = add(user_settings, "test_mode", true );
  // !!!!!!!!!!!!!!! ONLY FOR TESTING !!!!!!!!!!!!!!!!!!!!

  PKGINFO( `setDebugLevel(3) );

  include "misc_defines.ycp";


  boolean go_on = ChangeCD( 1, false );	// don't show additional popup
	  
  if ( !go_on )
  {
      textdomain "sw_single";            
      any ret = UI(`ContinueCancelPopup(_("No access to source media used on previous installation.
Continue with choosing new installation source?")) );

      if ( ret )		// choose new installation source
      {
	    any result = `next;
	    result = CallFunction( `inst_source( true, true ) );
	    if ( result != `next )
	    {
		UI(`CloseDialog() );
		return `cancel;
	    }
      }
      else			// exit the installation dialog
      {
	  UI(`CloseDialog() );
	  return `cancel;
      }
      textdomain "sw_update";
  }
  
  // Calling inst_updateControl
  any ret_single = CallFunction( `inst_updateControl( ) );

  _debug( "SW: Return inst_updateControl ", ret_single );

  any ret_rpm = nil;

  if ( ret_single == `finish )
  {
      CallFunction( `inst_suseconfig (false, false) );
  }

  // umount CD
  Shell ("/bin/umount /var/adm/mount");

  UI( `CloseDialog() );

  return `next;
}
